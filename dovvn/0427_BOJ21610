import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
    static int N,M;
    static int[][] map;
    static int[] di = {0, 0, -1, -1, -1, 0, 1, 1, 1};
    static int[] dj = {0, -1, -1, 0, 1, 1, 1, 0, -1};
    static int[] ddi = {-1, -1, 1, 1 }; //대각선방향
    static int[] ddj = {-1, 1, -1, 1};
    static boolean[][] groom;
    static List<Point> groomList;
    static int Ans;

    static class Point{
        int x, y;

        public Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N+1][N+1];
        groomList = new ArrayList<>();

        for(int i=1; i<=N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=1; j<=N; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                if(i==N && (j==1 || j==2)){
                    groomList.add(new Point(i, j));
                }
                if(i==N-1 && (j==1 || j==2)){
                    groomList.add(new Point(i, j));
                }
            }
        }

        int d = 0; //방향
        int s = 0; //이동칸수

        for(int i=1; i<=M; i++){
            st = new StringTokenizer(br.readLine());
            d = Integer.parseInt(st.nextToken());
            s = Integer.parseInt(st.nextToken());


            //1. 모든 구름 d방향으로 s칸 이동
            List<Point> tmpList = new ArrayList<>(); //이동 후 구름 좌표
            groom = new boolean[N+1][N+1];//이동 후 구름있는곳 true
            for(int k=1; k<=N; k++){
                Arrays.fill(groom[k], false);
            }

            for(int idx=0; idx<groomList.size(); idx++){
                Point now = groomList.get(idx);

                int ni = now.x + di[d]*s%N;
                int nj = now.y + dj[d]*s%N;

                if(ni>N) ni = ni % N;
                else if(ni<1) ni = N - (Math.abs(ni)%N);
                if(nj>N) nj = nj % N;
                else if(nj<1) nj = N - (Math.abs(nj)%N);


                tmpList.add(new Point(ni, nj));
                //2. 물의 양 1증가
                map[ni][nj]++;
                groom[ni][nj] = true;
            }
            groomList = tmpList;

            //3. 구름이 모두 사라진다.
            //4. 구름있던 곳의 대각선 거리1인 곳에 물이있는 개수만큼 물증가
            for(int idx=0; idx<groomList.size(); idx++){
                Point now = groomList.get(idx);

                //대각선 체크
                int cnt = 0;
                for(int dd=0; dd<4; dd++){
                    int ni = now.x + ddi[dd];
                    int nj = now.y + ddj[dd];

                    if(ni>=1 && ni<=N && nj>=1 && nj<=N && map[ni][nj]>=1) cnt++;
                }

                map[now.x][now.y] += cnt;
            }

            //5. 물이 2이상인곳 구름 생김
            tmpList = new ArrayList<>();

            for(int x=1; x<=N; x++){
                for(int y=1; y<=N; y++){
                    if(map[x][y]>=2){
                        //원래 구름있던 자리인지 체크
                        if(!groom[x][y]){
                            tmpList.add(new Point(x, y));
                            map[x][y]-=2;
                        }
                    }
                }
            }
            groomList = tmpList;
        }//End game


        for(int i=1; i<=N; i++){
            for(int j=1; j<=N; j++) Ans += map[i][j];
        }

        bw.write(Ans+"");
        bw.flush();
        bw.close();
        br.close();
    }

}
