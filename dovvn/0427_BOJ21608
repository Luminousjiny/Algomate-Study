import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

    static int N; //학생 수
    static int[][] map;
    static int[] di = {-1, 0, 1, 0};
    static int[] dj = {0, 1, 0, -1};
    static int Ans;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());

        map = new int[N+1][N+1];
        int[] order = new int[N*N+1]; //학생 순서
        List<Integer>[] likeList = new ArrayList[N*N+1]; //좋아하는 학생리스트
        for(int i=1; i<=N*N; i++){
            st = new StringTokenizer(br.readLine());
            order[i] = Integer.parseInt(st.nextToken());
            likeList[order[i]] = new ArrayList<>();
            for(int j=0; j<4; j++){
                likeList[order[i]].add(Integer.parseInt(st.nextToken()));
            }
        }//End input


        for(int num=1; num<=N*N; num++){ //모든 학생의 번호를 돌면서
            int maxX = 0;
            int maxY = 0;
            int maxLike = Integer.MIN_VALUE;
            int maxEmpty = Integer.MIN_VALUE;

            //1. 비어있는칸 중 좋아하는 학생이 인접한 칸 구한다.
            for(int i=1; i<=N; i++){
                for(int j=1; j<=N; j++){
                    if(map[i][j] == 0){
                        int likeCnt = 0; //현재 자리에서 인접한 칸에 좋아하는 학생 개수
                        int emptyCnt = 0; //비어있는 칸

                        for(int d=0; d<4; d++){
                            int ni = i + di[d];
                            int nj = j + dj[d];

                            if(ni>=1 && ni<=N && nj>=1 && nj<=N){
                                for(int s=0; s<likeList[order[num]].size(); s++){
                                    if(map[ni][nj] == likeList[order[num]].get(s)) likeCnt++;
                                    if(map[ni][nj] == 0) emptyCnt++;
                                }
                            }
                        }

                        //여러개면 비어있는 칸이 가장 많은 칸으로 자리를 정한다.
                        if(maxLike < likeCnt || (maxLike == likeCnt && maxEmpty < emptyCnt )){
                            maxX = i;
                            maxY = j;
                            maxLike = likeCnt;
                            maxEmpty = emptyCnt;
                        }
                    }
                }
            }

            map[maxX][maxY] = order[num];
        }

        //학생의 만족도 구하기
        for(int i=1; i<=N; i++){
            for(int j=1; j<=N; j++){
                int num = map[i][j];
                int cnt = 0; //인접한 칸에 좋아하는 학생 개수
                for(int d=0; d<4; d++){
                    int ni = i + di[d];
                    int nj = j + dj[d];

                    if(ni>=1 && ni<=N && nj>=1 && nj<=N){
                        for(int s=0; s<likeList[num].size(); s++)
                            if(map[ni][nj] == likeList[num].get(s)){
                                cnt++;
                                break;
                            }
                    }
                }

                if(cnt!=0) Ans += Math.pow(10, cnt-1);

            }
        }
        System.out.println(Ans);
    }
}
